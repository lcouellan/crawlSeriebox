{% extends 'base.twig' %}
{% block title %}Crawler Sériebox{% endblock %}
{% block body %}
<div id="chart"></div>
{% endblock %}
{% block javascripts %}
<script>


var children = [];
var compteurSerie = 1;
var compteurAttribut = 1;

{% for serie in series|sort %}
  {% if serie.nombreVotes|round > 750 %}
    children.push({
      "name": "{{ serie.nom }}",
      "id" : "1_"+compteurSerie,
      "children":[
        {
        "name":"Producteur : {{ serie.producteur }}",
        "id":"2_"+compteurAttribut,
        },
        {
        "name":"Etat : {{ serie.etat }}",
        "id":"2_" + compteurAttribut + 1,
        },
        {
        "name":"Date de diffusion : {{ serie.dateDiffusion }}",
        "id":"2_" + compteurAttribut + 2,
        },
        {
        "name":"Genres : {{ serie.genres }}",
        "id":"2_" + compteurAttribut + 3,
        },
        {
        "name":"Acteurs : {{ serie.acteurs }}",
        "id":"2_" + compteurAttribut + 4,
        },
        {
        "name":"Durée d'un épisode : {{ serie.dureeEp }}",
        "id":"2_" + compteurAttribut + 5,
        },
        {
        "name":"Note : {{ serie.note }} / 20",
        "id":"2_" + compteurAttribut + 6,
        },
        {
        "name":"Pays : {{ serie.pays }}",
        "id":"2_" + compteurAttribut + 7,
        },
        {
        "name":'Synopsis : {{ serie.synopsis[:250]|replace({"'":"\'"}) }}...',
        "id":"2_" + compteurAttribut + 8,
        },
        {
        "name":"Nombre de votes : {{ serie.nombreVotes }}",
        "id":"2_" + compteurAttribut + 9,
        }
        ]
    });
    compteurSerie += 1;
    compteurAttribut += 10;
  {% endif %}
{% endfor %}

var data = {
    "name": "Series", 
    "id": "0",   
    "children": children
};

 var w = 1920,
    h = 4000,
    i = 0,
    barHeight = 20,
    barWidth = w * .8,
    duration = 400,
    root;

var tree = d3.layout.tree().size([h, 100]);

var diagonal = d3.svg.diagonal().projection(function(d) {
    return [d.y, d.x];
});

var vis = d3.select("#chart").append("svg:svg").attr("width", w).attr("height", h).append("svg:g").attr("transform", "translate(20,30)");

data.x0 = 0;
data.y0 = 0;
update(root = data);

function update(source) {

    // Compute the flattened node list. TODO use d3.layout.hierarchy.
    var nodes = tree.nodes(root);

    // Compute the "layout".
    nodes.forEach(function(n, i) {
        n.x = i * barHeight;
    });

    // Update the nodes…
    var node = vis.selectAll("g.node").data(nodes, function(d) {
        return d.id || (d.id = ++i);
    });

    var nodeEnter = node.enter().append("svg:g").attr("class", "node").attr("transform", function(d) {
        return "translate(" + source.y0 + "," + source.x0 + ")";
    }).style("opacity", 1e-6);

    // Enter any new nodes at the parent's previous position.
    nodeEnter.append("svg:rect").attr("y", -barHeight / 2).attr("height", barHeight).attr("width", barWidth).style("fill", color).on("click", click);

    nodeEnter.append("svg:text").attr("dy", 3.5).attr("dx", 5.5).text(function(d) {
        return d.name;
    });

    // Add checkbox
    nodeEnter.append("svg:circle").attr("cy", 0).attr("cx",0).attr("r", 5).attr("fill", "white").on("click", function(d) {
        if (d.selected) {
            d.selected = false;
            d3.select(this).attr("fill", "white");
        } else {
            d.selected = true;
            d3.select(this).attr("fill", "black");
            insert_child(source,d.id,"test",1121);
        }
        printSelectedNodes();
        update(source);
    });

    // Transition nodes to their new position.
    nodeEnter.transition().duration(duration).attr("transform", function(d) {
        return "translate(" + d.y + "," + d.x + ")";
    }).style("opacity", 1);

    node.transition().duration(duration).attr("transform", function(d) {
        return "translate(" + d.y + "," + d.x + ")";
    }).style("opacity", 1).select("rect").style("fill", color);

    // Transition exiting nodes to the parent's new position.
    node.exit().transition().duration(duration).attr("transform", function(d) {
        return "translate(" + source.y + "," + source.x + ")";
    }).style("opacity", 1e-6).remove();

    // Update the links…
    var link = vis.selectAll("path.link").data(tree.links(nodes), function(d) {
        return d.target.id;
    });

    // Enter any new links at the parent's previous position.
    link.enter().insert("svg:path", "g").attr("class", "link").attr("d", function(d) {
        var o = {
            x: source.x0,
            y: source.y0
        };
        return diagonal({
            source: o,
            target: o
        });
    }).transition().duration(duration).attr("d", diagonal);

    // Transition links to their new position.
    link.transition().duration(duration).attr("d", diagonal);

    // Transition exiting nodes to the parent's new position.
    link.exit().transition().duration(duration).attr("d", function(d) {
        var o = {
            x: source.x,
            y: source.y
        };
        return diagonal({
            source: o,
            target: o
        });
    }).remove();

    // Stash the old positions for transition.
    nodes.forEach(function(d) {
        d.x0 = d.x;
        d.y0 = d.y;
    });
}

// Print to the console a list of selected nodes.
function printSelectedNodes() {
    var nodes = tree.nodes(root);
    var selected = [];
    nodes.forEach(function(n, i) {
        if (n.selected) {
          selected.push(n.name);
        }
    });
    console.log(selected);
}

function insert_child(object,ex_id,new_txt,new_id) {
   var o = object
   for(var a = 0; a < o.children.length; a++) {
        if(o.children[a].id == ex_id) {
           var new_idd = ex_id+"_"+ (o.children[a].children.length+1);
           o.children[a].children.push({
                name: new_idd, 
                id: new_idd, 
                children: []
            });
        } 
        else {
           insert_child(o.children[a],ex_id,new_txt,new_id);
        }
    }
};

// Toggle children on click.
function click(d) {
    if (d.children) {
        d._children = d.children;
        d.children = null;
    } else {
        d.children = d._children;
        d._children = null;
    }
    update(d);
}

function color(d) {
    return d._children ? "#0065B2" : d.children ? "A4EFFF" : "#E2A5FF";
}
</script>
{% endblock %}